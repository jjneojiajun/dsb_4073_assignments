summary(lmfit9)
cd <- cooks.distance(lmfit9)
wine_data.clean <- wine_data[abs(cd) < 4/nrow(wine_data),]
nrow(wine_data.clean)
lmfit10 <- lm(formula(lmfit9), data=wine_data.clean)
summary(lmfit10)
lmfit10 <- update(lmfit10, ~. + I(ph^2), data=wine_data)
lmfit10 <- update(lmfit10, ~. + I(pH^2), data=wine_data)
summary(lmfit10)
lmfit10 <- update(lmfit10, ~. + I(Alcohol^2), data=wine_data)
summary(lmfit10)
lmfit10 <- update(lmfit9, ~. + I(Alcohol^2), data=wine_data)
summary(lmfit10)
lmfit10 <- update(lmfit9, ~. + I(pH^2), data=wine_data)
summary(lmfit10)
lmfit10 <- update(lmfit9, ~. + I(Cholorides^2), data=wine_data)
summary(lmfit10)
lmfit10 <- update(lmfit9, ~. + I(Cholrides^2), data=wine_data)
lmfit10 <- update(lmfit9, ~. + I(Chlorides^2), data=wine_data)
summary(lmfit10)
lmfit11 <- update(lmfit10, ~. - Chlorides, data=wine_data)
summary(lmfit11)
lmfit10 <- update(lmfit9, ~. + I(pH^2), data=wine_data)
summary(lmfit10)
summary(lmfit9)
lmfit10 <- update(lmfit9, ~. - I(Sulphates^2), data=wine_data)
summary(lmfit10)
lmfit11 <- update(lmfit10, ~. - pH, data=wine_data)
summary(lmfit11)
summary(lmfit7)
summary(lmfit8)
lmfit9 <- update(lmfit8, ~. - TotalSulphurDioxide, data=wine_data)
summary(lmfit9)
cd <- cooks.distance(lmfit7)
wine_data.clean <- wine_data[abs(cd) < 4/nrow(wine_data),]
nrow(wine_data.clean)
lmfit8 <- lm(formula(lmfit7), data=wine_data.clean)
summary(lmfit8)
# Dimension of the data
dim(wine_data) # 1000 rows and 12 columns
par(mfrow = c(4,3))
for (i in c(1:11)) {
plot(wine_data[, i], jitter(wine_data[, "Quality"]), xlab = names(wine_data)[i],
ylab = "Quality", col = "firebrick", cex = 0.8, cex.lab = 1.3)
abline(lm(wine_data[, "quality"] ~ wine_data[ ,i]), lty = 2, lwd = 2)
}
par(mfrow = c(1, 1))
par(mfrow = c(4,3))
for (i in c(1:11)) {
plot(wine_data[, i], jitter(wine_data[, "Quality"]), xlab = names(wine_data)[i],
ylab = "Quality", col = "firebrick", cex = 0.8, cex.lab = 1.3)
abline(lm(wine_data[, "Quality"] ~ wine_data[ ,i]), lty = 2, lwd = 2)
}
par(mfrow = c(1, 1))
lmfit <- lm(Quality ~ ., data=wine_data)
lmfit <- lm(Quality ~ ., data=wine_data)
# Summary of the linear model
summary(lmfit)
##########################
# Correlation            #
##########################
library(corrplot)
cor_wine_data <- cor(wine_data)
corrplot.mixed(cor_wine_data)
par(mfrow = c(4,3))
for (i in c(1:11)) {
plot(wine_data[, i], jitter(wine_data[, "Quality"]), xlab = names(wine_data)[i],
ylab = "Quality", col = "blue", cex = 0.8, cex.lab = 1.3)
abline(lm(wine_data[, "Quality"] ~ wine_data[ ,i]), lty = 2, lwd = 2)
}
par(mfrow = c(1, 1))
lmfit <- lm(Quality ~ ., data=wine_data)
# Summary of the linear model
summary(lmfit)
# Remove Fixed Acidity
lmfit2 <- update(lmfit, ~. - pH, data=wine_data)
summary(lmfit2)
# Remove Critic Acid
lmfit3 <- update(lmfit2, ~. - FreeSulphurDioxide, data=wine_data)
summary(lmfit3)
# Remove Critic Acid
lmfit3 <- update(lmfit2, ~. - ResidualSugar, data=wine_data)
summary(lmfit3)
# Remove Critic Acid
lmfit3 <- update(lmfit2, ~. - CitricAcid, data=wine_data)
summary(lmfit3)
lmfit4 <- update(lmfit3, ~. - FreeSulphurDioxide, data=wine_data)
summary(lmfit4)
lmfit5 <- update(lmfit4, ~. - ResidualSugar, data=wine_data)
summary(lmfit5)
lmfit6 <- update(lmfit5, ~. - Density, data=wine_data)
summary(lmfit6)
lmfit <- lm(Quality ~ ., data=wine_data)
# Summary of the linear model
summary(lmfit)
# Remove Fixed Acidity
lmfit2 <- update(lmfit, ~. - FixedAcidity, data=wine_data)
summary(lmfit2)
lmfit3 <- update(lmfit2, ~. - CitricAcid, data=wine_data)
summary(lmfit3)
lmfit4 <- update(lmfit3, ~. - ResidualSugar, data=wine_data)
summary(lmfit4)
lmfit5 <- update(lmfit4, ~. - Density, data=wine_data)
summary(lmfit5)
lmfit6 <- update(lmfit5, ~. - FreeSulphurDioxide, data=wine_data)
summary(lmfit6)
# Which plot is the most non linear ?
lmfit7 <- update(lmfit5, ~. + I(pH^2), data=wine_data)
summary(lmfit7)
# Another Non Linear Plot Would be TheFree SulphurDioxide
lmfit8 <- update(lmfit7, ~. + I(FreeSulphurDioxide^2), data=wine_data)
summary(lmfit8)
# Combine both..
lmfit9 <- update(lmfit8, ~. + FreeSulphurDioxide:pH, data=wine_data)
summary(lmfit9)
# Which plot is the most non linear based on the Linear Regression model?
lmfit7 <- update(lmfit5, ~. + I(VolatileAcidity^2), data=wine_data)
summary(lmfit7)
# Which plot is the most non linear based on the Linear Regression model?
lmfit7 <- update(lmfit5, ~. + I(Chlorides^2), data=wine_data)
summary(lmfit7)
# Which plot is the most non linear based on the Linear Regression model?
lmfit7 <- update(lmfit5, ~. + I(TotalSulphurDioxide^2), data=wine_data)
summary(lmfit7)
# Which plot is the most non linear based on the Linear Regression model?
lmfit7 <- update(lmfit5, ~. + I(pH^2), data=wine_data)
summary(lmfit7)
# Which plot is the most non linear based on the Linear Regression model?
lmfit7 <- update(lmfit5, ~. + I(Sulphates^2), data=wine_data)
summary(lmfit7)
plot(lmfit5)
# Another Non Linear Plot Would be the FreeSulphurDioxide
lmfit8 <- update(lmfit7, ~. + I(Alcohol^2), data=wine_data)
summary(lmfit8)
# Combine both..
lmfit9 <- update(lmfit8, ~. + Sulphates:Alcohol, data=wine_data)
summary(lmfit9)
lmfit10 <- update(lmfit9, ~. - FreeSulphurDioxide, data=wine_data)
summary(lmfit10)
cd <- cooks.distance(lmfit9)
wine_data.clean <- wine_data[abs(cd) < 4/nrow(wine_data),]
nrow(wine_data.clean)
lmfit10 <- lm(formula(lmfit9), data=wine_data.clean)
summary(lmfit9)
summary(lmfit10)
setwd("~/Desktop/ntu-ay-2018s1/CE4073 - Data Science For Business/Lecture R Files and Data")
# ---------------------------------------------------------
# Task 1 : Import the dataset Week04HouseData.csv
house_data <- read.csv('Week04HouseData.csv')
# 6a : fit a linear model on medv vs all other variables
# This is the first model --- also called the FULL MODEL
lmfit <- lm(medv~crim + indus + nox + rm + age + dis + tax + ptratio + black + lstat, data= house_data)
# 6b : display the "summary" of the linear model
summary(lmfit)
# 7a : fit a linear model on medv vs all variables but the
# one with the least significance in the previous model
lmfit2 <- lm(medv ~ crim + indus + nox + rm + dis + tax + ptratio + black + lstat, data=house_data)
# 7b : display the "summary" of the updated linear model
summary(lmfit2)
# 8a : fit a linear model on medv vs remaining variables but
# the one with the least significance in the previous model
lmfit3 <- lm(medv ~ crim + nox + rm + dis + tax + ptratio + black + lstat, data=house_data)
# 8b : display the "summary" of the updated linear model
summary(lmfit3)
# 9a : fit a linear model on medv vs remaining variables but
# the one with the least significance in the previous model
lmfit4 <- lm(medv ~ crim + nox + rm + dis + ptratio + black + lstat, data=house_data)
# 9b : display the "summary" of the updated linear model
summary(lmfit4)
lmfit5 <-update(lmfit4, ~ . - crim , data=house_data)
summary(lmfit5)
# 11c : fit a linear model on medv vs remaining variables but
# introduce non-linear term(s) as per your observation above
lmfit6 <- update(lmfit5, ~ . + I(lstat^2), data = house_data)
# 11d : did the R-squared values improve, as you expected?
summary(lmfit6)
lmfit7 <- update(lmfit6, ~ . + I(rm^2), data= house_data)
summary(lmfit7)
lmfit8 <- update(lmfit7, ~ . + lstat:rm, data=house_data)
summary(lmfit8)
summary(lmfit8)
setwd("~/Desktop/ntu-ay-2018s1/CE4073 - Data Science For Business/Assignment 1")
# Assignment 1 Q1
# Load Data of Wine
wine_data <- read.csv('assign1_WineData.csv')
##################################
# EDA (Exploratory Data Analysis)#
##################################
# Dimension of the data
dim(wine_data) # 1000 rows and 12 columns
# Names of columns of the data
names(wine_data)
# 'FixedAcidity' (4.6 - 15.9) - In fact, acids impart the sourness or tartness that is a fundamental feature in wine taste.
# 'VolatileAcidity' (0.12 - 1.33) - Basically the process of wine turning into vinegar.
# 'CitricAcid' (0.0 - 1.0)- Citric acid is found only in very minute quantities in wine grapes.
# 'ResidualSugar' (0.9-15.5) - Refers to any natural grape sugars that are leftover after fermentation ceases
# 'Chlorides'(0.012 - 0.611) - Cholorides Level
# 'FreeSulphurDioxide' (1.00 - 72.00):
#  A good winemaker will try to get the highest proportion of free sulphur
#  to bound that he can. At best this will be about half the amount bound.
# 'TotalSulphurDioxide' (6.00 - 289.00) -
# 'Density' (0.9901 - 1.0037) -
# 'pH' (2.74 - 4.01) - pH Level of wine usually from 2.6 - 5.0
# 'Sulphates' (0.37 - 2.00) - Sulphates Level
# 'Alcohol' (8.4- 14.9) - Alcohol Level
# 'Quality' (3.00 - 8.00) (Target)
# Structure of data
str(wine_data)
# Summary of Data
summary(wine_data)
# Head of Data (6)
head(wine_data)
# Tail of Data (6)
tail(wine_data)
#########################
# Data Visualization    #
#########################
help(boxplot)
# Boxplot - Fixed Acidity
boxplot(wine_data$FixedAcidity, horizontal = T,
main="Wine Data (Fixed Acidity)",
xlab="Fixed Acidity Level")
# Boxplot - Volatile Acidity
boxplot(wine_data$VolatileAcidity, horizontal = T,
main="Volatile Acidity",
xlab='Volatile Acidity Level')
# Boxplot - Citric Acid
boxplot(wine_data$CitricAcid, horizontal = T,
main="Critic Acid",
xlab='Citric Acid Level')
# Boxplot - Residual Sugar
boxplot(wine_data$ResidualSugar, horizontal = T, main="Residual Sugar",
xlab='Residual Sugar Level')
# Boxplot - Chlorides
boxplot(wine_data$Chlorides, horizontal = T, main="Chlorides",
xlab='Chlorides Level')
# Boxplot - FreeSulphurDioxide
boxplot(wine_data$FreeSulphurDioxide, horizontal = T, main="Free SulphurDioxide",
xlab='Free SulphurDioxide Level')
# Boxplot - Total Sulphur Dioxide
boxplot(wine_data$TotalSulphurDioxide, horizontal = T, main="TotalSulphurDioxide",
xlab='Total Sulphur Dioxide Level')
# Boxplot - Density
boxplot(wine_data$Density, horizontal = T, main='Density',
xlab='Density')
# Boxplot - pH
boxplot(wine_data$pH, horizontal = T, main="Wine Data (PH)",
xlab="pH Level")
### Plotting Linear Regression Model
par(mfrow = c(4,3))
for (i in c(1:11)) {
plot(wine_data[, i], jitter(wine_data[, "Quality"]), xlab = names(wine_data)[i],
ylab = "Quality", col = "blue", cex = 0.8, cex.lab = 1.3)
abline(lm(wine_data[, "Quality"] ~ wine_data[ ,i]), lty = 2, lwd = 2)
}
par(mfrow = c(1, 1))
##############################################################
# Learning as of the Linear Regression Model for each chart:
# As VolatileAcidity Level increase, the quality is expected to decrease
# As Chlorides Level increases, the quality is expected to decrease
# As CitricAcid Level increases, the quality is expected to increase
# As Fixed Acidity Level increases, the quality is expected to slightly increase
# As Density Level increases, the quality is expected to drop slightly
# Residual Sugar, FreeSulphurDioxide, pH is not a big factor in part to increase quality
# As TotalSulphurDioxide increases, the quality is expected to drop
# As the Sulphates Level increases, the quality is expected to increase
# As the Alcohol Level increases, the quality is expected to increase
##############################################################
##########################
# Correlation            #
##########################
library(corrplot)
cor_wine_data <- cor(wine_data)
corrplot.mixed(cor_wine_data)
##############################################################
# Learning:
# VolatileAcidity is highly negatively correlated to Quality (-0.39)
# Density is highly negatively correlated to Quality (-0.2)
# TotalSulphurDioxide is highly negatively correlated to Quality (-0.18)
##############################################################
##########################
# Linear Model           #
##########################
lmfit <- lm(Quality ~ ., data=wine_data)
# Summary of the linear model
summary(lmfit)
# Residual Standard Error: 0.6584 on 988 degrees of freedom
# Multiple R-squared:  0.348 && Adjusted R-squared:  0.3407
#Lowest Significance and Probability Variable
# FixedAcidity
# Remove Fixed Acidity
lmfit2 <- update(lmfit, ~. - FixedAcidity, data=wine_data)
summary(lmfit2)
# Residual standard error: 0.6581 on 989 degrees of freedom
# Multiple R-squared:  0.3479,	Adjusted R-squared:  0.3413
# Lowest Significance
# CriticAcid
# Remove Critic Acid
lmfit3 <- update(lmfit2, ~. - CitricAcid, data=wine_data)
summary(lmfit3)
# Residual standard error: 0.6578 on 990 degrees of freedom
# Multiple R-squared:  0.3479,	Adjusted R-squared:  0.3419
# Lowest Significance
# ResidualSugar
lmfit4 <- update(lmfit3, ~. - ResidualSugar, data=wine_data)
summary(lmfit4)
# Residual standard error: 0.6578 on 991 degrees of freedom
# Multiple R-squared:  0.3472,	Adjusted R-squared:  0.342
# Lowest Significance
# Density
lmfit5 <- update(lmfit4, ~. - Density, data=wine_data)
summary(lmfit5)
# Residual standard error: 0.6576 on 992 degrees of freedom
# Multiple R-squared:  0.3469,	Adjusted R-squared:  0.3423
# Lowest Significant
# FreeSulphurDioxide
lmfit6 <- update(lmfit5, ~. - FreeSulphurDioxide, data=wine_data)
summary(lmfit6)
# Residual standard error: 0.6586 on 993 degrees of freedom
# Multiple R-squared:  0.3443,	Adjusted R-squared:  0.3403
# Realize that the Adjusted R square dropped! This mean that we have pretty
# much removed all the values that are really insignificant.
# Thus we will use lmfit5
plot(lmfit5)
# Residual standard error: 0.6467 on 991 degrees of freedom
# Multiple R-squared:  0.3691,	Adjusted R-squared:  0.364
# Another Non Linear Plot Would be the Alcohol
lmfit8 <- update(lmfit7, ~. + I(Alcohol^2), data=wine_data)
summary(lmfit8)
# Residual standard error: 0.6464 on 990 degrees of freedom
# Multiple R-squared:  0.3703,	Adjusted R-squared:  0.3646
# Combine both..
lmfit9 <- update(lmfit8, ~. + Sulphates:Alcohol, data=wine_data)
summary(lmfit9)
# Residual standard error: 0.6443 on 989 degrees of freedom
# Multiple R-squared:  0.375,	Adjusted R-squared:  0.3686
# However, not all the values are significant now!
cd <- cooks.distance(lmfit9)
wine_data.clean <- wine_data[abs(cd) < 4/nrow(wine_data),]
nrow(wine_data.clean)
lmfit10 <- lm(formula(lmfit9), data=wine_data.clean)
summary(lmfit10)
# Residual standard error: 0.5629 on 939 degrees of freedom
# Multiple R-squared:  0.4386,	Adjusted R-squared:  0.4326
lmfit7 <- update(lmfit5, ~. + I(Sulphates^2), data=wine_data)
summary(lmfit7)
# Another Non Linear Plot Would be the Alcohol
lmfit8 <- update(lmfit7, ~. - FreeSulphurDioxide, data=wine_data)
summary(lmfit8)
lmfit9 <- update(lmfit8, ~. + I(Alcohol^2), data=wine_data)
summary(lmfit9)
# Combine both..
lmfit9 <- update(lmfit8, ~. + I(pH^2), data=wine_data)
summary(lmfit9)
lmfit10 <- update(lmfit9, ~. + pH:Sulphates, data=wine_data)
summary(lmfit9)
summary(lmfit10)
lmfit8 <- update(lmfit7, ~. - FreeSulphurDioxide, data=wine_data)
summary(lmfit8)
# Another Non Linear Plot Would be the Alcohol
lmfit8 <- update(lmfit7, ~. - FreeSulphurDioxide - TotalSulphurDioxide, data=wine_data)
summary(lmfit8)
# Another Non Linear Plot Would be the Alcohol
lmfit8 <- update(lmfit7, ~. - FreeSulphurDioxide, data=wine_data)
summary(lmfit8)
lmfit9 <- update(lmfit8, ~. + I(TotalSulphurDioxide^2), data=wine_data)
summary(lmfit9)
lmfit9 <- update(lmfit8, ~. + I(Alcohol^2), data=wine_data)
summary(lmfit9)
lmfit9 <- update(lmfit8, ~. + I(pH^2), data=wine_data)
summary(lmfit9)
lmfit9 <- update(lmfit8, ~. + I(TotalSulphurDioxide^2), data=wine_data)
summary(lmfit9)
lmfit10 <- update(lmfit9, ~. + Sulphates:TotalSulphurDioxide, data=wine_data)
summary(lmfit10)
lmfit10 <- update(lmfit9, ~. + Sulphates:TotalSulphurDioxide, data=wine_data)
summary(lmfit10)
lmfit9 <- update(lmfit8, ~. + I(pH^2), data=wine_data)
summary(lmfit9)
lmfit9 <- update(lmfit8, ~. + I(Alcohol^2), data=wine_data)
summary(lmfit9)
pH
lmfit9 <- update(lmfit8, ~. + I(pH^2), data=wine_data)
summary(lmfit9)
cd <- cooks.distance(lmfit9)
wine_data.clean <- wine_data[abs(cd) < 4/nrow(wine_data),]
nrow(wine_data.clean)
lmfit10 <- lm(formula(lmfit9), data=wine_data.clean)
summary(lmfit10)
library(corrplot)
cor_wine_data <- cor(wine_data)
corrplot.mixed(cor_wine_data)
lmfit2 <- update(lmfit, ~. - FixedAcidity, data=wine_data)
summary(lmfit2)
lmfit <- lm(Quality ~ ., data=wine_data)
# Summary of the linear model
summary(lmfit)
# Remove Critic Acid
lmfit3 <- update(lmfit2, ~. - pH, data=wine_data)
summary(lmfit3)
lmfit4 <- update(lmfit3, ~. - ResidualSugar, data=wine_data)
summary(lmfit4)
lmfit5 <- update(lmfit4, ~. - FreeSulphurDioxide, data=wine_data)
summary(lmfit5)
lmfit6 <- update(lmfit5, ~. - Chlorides, data=wine_data)
summary(lmfit6)
View(lmfit6)
# Load Data of Wine
wine_data <- read.csv('assign1_WineData.csv')
### Plotting Linear Regression Model
par(mfrow = c(4,3))
for (i in c(1:11)) {
plot(wine_data[, i], jitter(wine_data[, "Quality"]), xlab = names(wine_data)[i],
ylab = "Quality", col = "blue", cex = 0.8, cex.lab = 1.3)
abline(lm(wine_data[, "Quality"] ~ wine_data[ ,i]), lty = 2, lwd = 2)
}
par(mfrow = c(1, 1))
par(mfrow = c(4,3))
for (i in c(1:11)) {
plot(wine_data[, i], jitter(wine_data[, "Quality"]), xlab = names(wine_data)[i],
ylab = "Quality", col = "blue", cex = 0.8, cex.lab = 1.3)
abline(lm(wine_data[, "Quality"] ~ wine_data[ ,i]), lty = 2, lwd = 2)
}
par(mfrow = c(1, 1))
par(mfrow = c(4,3))
for (i in c(1:11)) {
plot(wine_data[, i], jitter(wine_data[, "Quality"]), xlab = names(wine_data)[i],
ylab = "Quality", col = "blue", cex = 0.8, cex.lab = 1.3)
abline(lm(wine_data[, "Quality"] ~ wine_data[ ,i]), lty = 2, lwd = 2)
}
par(mfrow = c(1, 1))
setwd("~/Desktop/ntu-ay-2018s1/CE4073 - Data Science For Business/Assignment 1")
# Load Data of Cars
car_data <- read.csv('assign1_CarData.csv')
# Load Data of Cars
car_data <- read.csv('assign1_CarData.csv')
# Dimensions
dim(car_data)
# Structure of the Data
str(car_data)
# Names
names(car_data)
# Head of the Data
head(car_data)
# Tail of the data
tail(car_data)
# Summary of the data
summary(car_data)
par(mfrow = c(4,3))
for (i in c(1:5)) {
plot(car_data[, i], car_data(car_data[, "mpg"]), xlab = names(wine_data)[i],
ylab = "mpg", col = "blue", cex = 0.8, cex.lab = 1.3)
abline(lm(car_data[, "mpg"] ~ car_data[ ,i]), lty = 2, lwd = 2)
}
par(mfrow = c(1, 1))
par(mfrow = c(4,3))
for (i in c(1:5)) {
plot(car_data[, i], jitter(car_data[, "mpg"]), xlab = names(wine_data)[i],
ylab = "mpg", col = "blue", cex = 0.8, cex.lab = 1.3)
abline(lm(car_data[, "mpg"] ~ car_data[ ,i]), lty = 2, lwd = 2)
}
par(mfrow = c(1, 1))
par(mfrow = c(4,3))
for (i in c(1:5)) {
plot(car_data[, i], jitter(car_data[, "mpg"]), xlab = names(car_data)[i],
ylab = "mpg", col = "blue", cex = 0.8, cex.lab = 1.3)
abline(lm(car_data[, "mpg"] ~ car_data[ ,i]), lty = 2, lwd = 2)
}
par(mfrow = c(1, 1))
par(mfrow = c(4,3))
for (i in c(1:5)) {
plot(car_data[, i], jitter(car_data[, "mpg"]), xlab = names(car_data)[i],
ylab = "mpg", col = "blue", cex = 0.8, cex.lab = 1.3)
abline(lm(car_data[, "mpg"] ~ car_data[ ,i]), lty = 2, lwd = 2)
}
par(mfrow = c(1, 1))
library(corrplot)
cor_car_data <- cor(car_data)
corrplot.mixed(cor_car_data)
lmfit <- lm(mpg ~ ., data=car_data)
# Summary of the linear model
summary(lmfit)
# Least Significantce and Highest Probability of Going 0
# Acceleration
lmfit2 <- update(lmfit, ~. - acceleration, data = car_data)
summary(lmfit2)
# Summary of the linear model
summary(lmfit)
lmfit3 <- update(lmfit2, ~. - cylinders, data = car_data)
summay(lmfit3)
summary(lmfit3)
lmfit4 <- update(lmfit3, ~. - displacement, data = car_data)
summary(lmfit4)
lmfit5 <- update(lmfit4, ~. + I(horsepower^2), data=car_data)
summary(lmfit5)
lmfit6 <- update(lmfit5, ~. + I(weight^2), data=car_data)
summary(lmfit6)
# Combine both
lmfit7 <- update(lmfit6, ~. + horsepower:weight, data=car_data)
summary(lmfit7)
plot(lmfit6)
cd <- cooks.distance(lmfit6)
wine_data.clean <- wine_data[abs(cd) < 4/nrow(wine_data),]
car_data.clean <- car_data[abs(cd) < 4/nrow(car_data),]
nrow(wine_data.clean)
nrow(car_data.clean)
cd <- cooks.distance(lmfit6)
car_data.clean <- car_data[abs(cd) < 4/nrow(car_data),]
nrow(car_data.clean)
lmfit10 <- lm(formula(lmfit9), data=car_data.clean)
lmfit7 <- lm(formula(lmfit6), data=car_data.clean)
summary(lmfit7)
