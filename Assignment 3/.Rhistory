mean(x)
var(x)
summary(x)
summary(x[1:6])
summary(x[7:12])
# Matrices
x <- c(5,7,9)
y <- c(6,3,4)
z <- cbind(x,y)
z
dim(z)
rbind(z,z)
# Matrices can also be build by explicit construction
z <- matrix(c(5,7,9,6,3,4), nrow=3)
z
y <- matrix(c(1,3,0,9,5,-1), nrow=3, byrow=T)
y
# We obtain
y  z
# We obtain
y + z
z
# Matrices can also be build by explicit construction
z <- matrix(c(5,7,9,6,3,4), nrow=3, byrow=T)
z
y <- matrix(c(1,3,0,9,5,-1), nrow=3, byrow=T)
y
# We obtain
y + z
y * z
x <- matrix(c(3,4,-2,6), nrow=2, byrow=T)
x
y%*%x
# Matrix Transpose t() and solve to calculate inverse
t(z)
solve(x)
x <- matrix(c(3,2,-1,1) nrow=2, byrow=T)
x <- matrix(c(3,2,-1,1), nrow=2, byrow=T)
x
y <- matrix(c(1,4,0,0,1,-1), nrow=2, byrow=T)
y
2*x
x*x
x%*%x
x%*%y
t(y)
solve(x)
x[1,]
x[2,]
x[,2]
y[1,2]
y[,2:3]
trees[1:5,]
head(trees)
attach(trees)
mean(Height)
mean(trees[,2])
#Exercise
attach(quakes)
summary(depth)
summary(mag)
attach(mtcars)
help(mtcars)
mean(wt)
## Apply function
apply(trees,2,mean)
apply(mtcars,2,mean)
apply(quakes,2,mean)
y <- matrix(c(1,4,1,0,2,-1), nrow=2, byrow=T)
y
apply(y[,2:3],1,mean)
# Statistical Computation and Simulation
# For example X ~ N(3,2^2)
dnorm(5,3,2)
# Graphics
# Dividing a page into smaller pieces
par(mfrow=c(2,2))
hist(Height)
boxplot(Height)
hist(Volume)
boxplot(Volume)
par(mforw=c(1,1))
par(mfrow=c(2,2))
hist(Height)
boxplot(Height)
hist(Volume)
boxplot(Volume)
par(mforw=c(1,1))
par(mfrow=c(2,2))
hist(Height)
boxplot(Height)
hist(Volume)
boxplot(Volume)
par(mfrow=c(1,1))
#Examples
plot(Height, Volume)
pairs(trees)
data("nhtemp")
plot(nhtemp)
plot(faithful)
data("HairEyeColor")
plot(HairEyeColor)
# Example
x <- c(9,5,2,3,7)
# Writing Functions
# Defining functions
sd <- function(x) sqrt(var(x))
sd(x)
# Multiple lines
fix(several.plots)
several.plots(faithful)
carData <- as.data.frame(cars)
carData <- as.data.frame(cars)
head(carData)
# calculate the time taken
carData$time <- dist/speed
# calculate the time taken
carData$time <- carData$dist/carData$speed
head(carData)
# Basic Exploration
dim(carData)
names(carData)
str(carData)
help(car)
help(??car)
help(cars)
cor([,0:2])
cor(carData[,0:2])
help(cars)
# Plotting
plot(cars, xlab = "Speed (mph)", ylab = "Stopping distance (ft)",
las = 1)
lmfit <- lm(speed~dist, data = carData)
lmfit$coefficients
abline(lmfit$coefficients, col="red", lwd=4)     # draw the optimal regression line
lmfit <- lm(dist~speed, data = carData)
lmfit$coefficients
abline(lmfit$coefficients, col="red", lwd=4)     # draw the optimal regression line
plot(cars, xlab = "Speed (mph)", ylab = "Stopping distance (ft)",
las = 1)
lmfit <- lm(dist~speed, data = carData)
lmfit$coefficients
abline(lmfit$coefficients, col="red", lwd=4)
lmfit$residuals
sum(lmfit$residuals^2)
#random guess
mean(carData$dist)
sum((carData$dist - mean(carData$dist))^2) # SSE
sse <- sum((carData$dist - mean(carData$dist))^2) # SSE
sd = sqrt(sse)
sd
sse <- sum((carData$dist - mean(carData$dist))^2) # SSE
sse
summary(lmfit)
help(lm)
# Note that R comes with a bunch of inbuilt datasets
data()
# ---------------------------------------------------------
# Task 1 : Assign the dataset to a variable
cars_dataset <- data(cars)
# 2a : dimension of the dataset
dim(cars_dataset)
# ---------------------------------------------------------
# Task 1 : Assign the dataset to a variable
cars_dataset <- as.data.frame(cars)
# 2a : dimension of the dataset
dim(cars_dataset)
# 2b : labels of the columns/variables
names(cars_dataset)
# 2c : structure of the dataset
str(cars_dataset)
# 2d : first few rows of the data
head(cars_dataset)
# 2e : last few rows of the data
tail(cars_dataset)
# 2f : summary statistics for all variables
summary(cars_dataset)
# 3a : histograms of speed and dist
hist(cars_dataset$speed, cars_dataset$dist)
# 3a : histograms of speed and dist
hist(cars_dataset$speed)
# 3b : histograms of speed and dist
hist(cars_dataset$dist)
# ---------------------------------------------------------
# Task 4 : Find the correlation between "speed" and "dist"
cor(cars_dataset$speed, cars_dataset$dist)
# ---------------------------------------------------------
# Task 5 : Plot speed vs dist in a 2d scatterplot (points)
points(cars_dataset$speed, cars_dataset$dist)
# ---------------------------------------------------------
# Task 5 : Plot speed vs dist in a 2d scatterplot (points)
points(cars_dataset$speed, cars_dataset$dist)
# ---------------------------------------------------------
# Task 5 : Plot speed vs dist in a 2d scatterplot (points)
e <- ggplot(cars_dataset, aes(speed, dist))
# ---------------------------------------------------------
# Task 5 : Plot speed vs dist in a 2d scatterplot (points)
points(cars_dataset$speed, cars_dataset$dist)
# ---------------------------------------------------------
# Task 5 : Plot speed vs dist in a 2d scatterplot (points)
help(points)
points(x=cars_dataset$speed, y=cars_dataset$dist, type="p")
plot.new
clear
# ---------------------------------------------------------
# Task 1 : Assign the dataset to a variable
cars_dataset <- as.data.frame(cars)
# 2a : dimension of the dataset
dim(cars_dataset)
# 2b : labels of the columns/variables
names(cars_dataset)
# 2c : structure of the dataset
str(cars_dataset)
# 2d : first few rows of the data
head(cars_dataset)
# 2e : last few rows of the data
tail(cars_dataset)
# 2f : summary statistics for all variables
summary(cars_dataset)
# 3a : histograms of speed and dist
hist(cars_dataset$speed)
# 3b : histograms of speed and dist
hist(cars_dataset$dist)
points(x=cars_dataset$speed, y=cars_dataset$dist, type="p")
plot(x=cars_dataset$speed, y=cars_dataset$dist, type="p")
# 6a : fit a linear model on dist vs speed in the data
lm.fit(x=cars_dataset$dist, y=cars_dataset$speed)
# 6a : fit a linear model on dist vs speed in the data
lmfit <- lm(dist~speed, data = cars_dataset)
# 6b : find the coefficients of the linear model
lmfit$coefficients
# 6c : plot the regression line on the scatterplot
abline(lmfit$coefficients, col="red", lwd=4)
# 7b : find the final "residual sum of squares" of errors
lmfit$residuals
sum(lmfit$residuals^2)
sum(lmfit$residuals^2)
# 7a : find the initial "total sum of squares" of errors
lmfit
# 7c : by how much did you "improve" the sum of squares
lmfit$effects
?boxplot()
boxplot(cars_dataset$speed)
# ---------------------------------------------------------
# Task 1 : Assign the dataset to a variable
cars_dataset <- as.data.frame(cars)
boxplot(cars_dataset$speed)
boxplot(cars_dataset$speed, horizontal = TRUE)
# 7a : find the initial "total sum of squares" of errors
TSS <- sum((carData$dist - mean(carData$dist))^2)
TSS
# 7b : find the final "residual sum of squares" of errors
lmfit$residuals
sum(lmfit$residuals^2)
# 7c : by how much did you "improve" the sum of squares
TSS - RSS
RSS <- sum(lmfit$residuals^2)
# 7c : by how much did you "improve" the sum of squares
TSS - RSS
# We have improved the 21185.46 in terms of sum of squares.
# Proportionally
(TSS-RSS)/TSS
summary(lmfit)
setwd("~/Desktop/ntu-ay-2018s1/CE4073 - Data Science For Business/Assignments/Assignment 3")
responses_df <- read.csv("responses.csv")
# EDA
dim(responses_df)
head(responses_df[1,])
# Based on these data, I can see that there are a few categories
# Music (Jazz, Opera)
# Movies (Action, War)
# Interest (History, Pets)
# Fears (Flying, Spiders, Dangerous Dogs)
# Health (Smoking, Alcohol, Healhty eating)
# There's Non-Applicable Value in the dataframe
responses_df <- na.omit(responses_df)
responses_df$Gender <- as.numeric(as.factor(responses_df$Gender))
str(responses_df)
# Remove String Columns
# Interest in Music
responses_music_df <- responses_df[, 3:19]
responses_music_df <- cbind(responses_music_df, Gender=(responses_df$Gender))
str(responses_music_df)
# Interest in Movies
responses_movies_df <- responses_df[,21:31]
responses_movies_df <- cbind(responses_movies_df, Gender=(responses_df$Gender))
str(responses_movies_df)
# Interests
responses_interests_df <- responses_df[, 32:63]
responses_interests_df <- cbind(responses_interests_df, Gender=(responses_df$Gender))
str(responses_interests_df)
# Fears
responses_fear_df <- responses_df[, 65:73]
responses_fear_df <- cbind(responses_fear_df, Gender=(responses_df$Gender))
str(responses_fear_df)
#######################################################
# K Means                                             #
#######################################################
# Optimal Number Of Clusters for Music
fviz_nbclust(responses_music_df, kmeans, method = "gap_stat")
set.seed(101)
responses_music_df.res <- kmeans(responses_music_df, 3, nstart = 25)
fviz_cluster(responses_music_df.res, data = responses_music_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# Optimal Number of Clusters for Movies
fviz_nbclust(responses_movies_df, kmeans, method = "gap_stat")
set.seed(101)
responses_movies_df.res <- kmeans(responses_movies_df, 3, nstart = 25)
fviz_cluster(responses_movies_df.res, data = responses_movies_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# Optimal Number of Clusters for Interests
fviz_nbclust(responses_interests_df, kmeans, method = "gap_stat")
set.seed(101)
responses_interests_df.res <- kmeans(responses_interests_df, 6, nstart = 25)
fviz_cluster(responses_interests_df.res, data = responses_interests_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# Optimal Number of Clusters for Fear
fviz_nbclust(responses_fear_df, kmeans, method = "gap_stat")
set.seed(101)
responses_fear_df.res <- kmeans(responses_fear_df, 2, nstart = 25)
fviz_cluster(responses_fear_df.res, data = responses_fear_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# There's a possiblilty that cluster analysis is affected by Gender
# This can be seen in the differences in the optimal clusters
# Each interest seems to have varying effect for gender. This can be fully seen via
# the fear clusters.
library(jsonlite)
library(tm)
library(cluster)
library(SnowballC)
library(tidyr)
library(factoextra)
responses_df <- read.csv("responses.csv")
# EDA
dim(responses_df)
head(responses_df[1,])
# Based on these data, I can see that there are a few categories
# Music (Jazz, Opera)
# Movies (Action, War)
# Interest (History, Pets)
# Fears (Flying, Spiders, Dangerous Dogs)
# Health (Smoking, Alcohol, Healhty eating)
# There's Non-Applicable Value in the dataframe
responses_df <- na.omit(responses_df)
responses_df$Gender <- as.numeric(as.factor(responses_df$Gender))
str(responses_df)
# Remove String Columns
# Interest in Music
responses_music_df <- responses_df[, 3:19]
responses_music_df <- cbind(responses_music_df, Gender=(responses_df$Gender))
str(responses_music_df)
# Interest in Movies
responses_movies_df <- responses_df[,21:31]
responses_movies_df <- cbind(responses_movies_df, Gender=(responses_df$Gender))
str(responses_movies_df)
# Interests
responses_interests_df <- responses_df[, 32:63]
responses_interests_df <- cbind(responses_interests_df, Gender=(responses_df$Gender))
str(responses_interests_df)
# Fears
responses_fear_df <- responses_df[, 65:73]
responses_fear_df <- cbind(responses_fear_df, Gender=(responses_df$Gender))
str(responses_fear_df)
#######################################################
# K Means                                             #
#######################################################
# Optimal Number Of Clusters for Music
fviz_nbclust(responses_music_df, kmeans, method = "gap_stat")
set.seed(101)
responses_music_df.res <- kmeans(responses_music_df, 3, nstart = 25)
fviz_cluster(responses_music_df.res, data = responses_music_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# Optimal Number of Clusters for Movies
fviz_nbclust(responses_movies_df, kmeans, method = "gap_stat")
set.seed(101)
responses_movies_df.res <- kmeans(responses_movies_df, 3, nstart = 25)
fviz_cluster(responses_movies_df.res, data = responses_movies_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# Optimal Number of Clusters for Interests
fviz_nbclust(responses_interests_df, kmeans, method = "gap_stat")
set.seed(101)
responses_interests_df.res <- kmeans(responses_interests_df, 6, nstart = 25)
fviz_cluster(responses_interests_df.res, data = responses_interests_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# Optimal Number of Clusters for Fear
fviz_nbclust(responses_fear_df, kmeans, method = "gap_stat")
set.seed(101)
responses_fear_df.res <- kmeans(responses_fear_df, 2, nstart = 25)
fviz_cluster(responses_fear_df.res, data = responses_fear_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# There's a possiblilty that cluster analysis is affected by Gender
# This can be seen in the differences in the optimal clusters
# Each interest seems to have varying effect for gender. This can be fully seen via
# the fear clusters.
responses_df <- read.csv("responses.csv")
# EDA
dim(responses_df)
head(responses_df[1,])
# Based on these data, I can see that there are a few categories
# Music (Jazz, Opera)
# Movies (Action, War)
# Interest (History, Pets)
# Fears (Flying, Spiders, Dangerous Dogs)
# Health (Smoking, Alcohol, Healhty eating)
# There's Non-Applicable Value in the dataframe
responses_df <- na.omit(responses_df)
responses_df$Gender <- as.numeric(as.factor(responses_df$Gender))
str(responses_df)
# Remove String Columns
# Interest in Music
responses_music_df <- responses_df[, 3:19]
responses_music_df_with_gender  <- cbind(responses_music_df, Gender=(responses_df$Gender))
str(responses_music_df)
str(responses_music_df_with_gender)
# Interest in Movies
responses_movies_df <- responses_df[,21:31]
responses_movies_df_with_gender <- cbind(responses_movies_df, Gender=(responses_df$Gender))
str(responses_movies_df)
str(responses_movies_df_with_gender)
# Interests
responses_interests_df <- responses_df[, 32:63]
responses_interests_df_with_gender  <- cbind(responses_interests_df, Gender=(responses_df$Gender))
str(responses_interests_df)
str(responses_interests_df_with_gender)
# Fears
responses_fear_df <- responses_df[, 65:73]
responses_fear_df_with_gender  <- cbind(responses_fear_df, Gender=(responses_df$Gender))
str(responses_fear_df)
str(responses_fear_df_with_gender)
# Optimal Number Of Clusters for Music
fviz_nbclust(responses_music_df, kmeans, method = "gap_stat")
responses_music_df.res <- kmeans(responses_music_df, 3, nstart = 25)
fviz_cluster(responses_music_df.res, data = responses_music_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# Optimal Number Of Clusters for Music With Gender
fviz_nbclust(responses_music_df_with_gender, kmeans, method = "gap_stat")
responses_music_df_with_gender.res <- kmeans(responses_music_df, 3, nstart = 25)
fviz_cluster(responses_music_df.res, data = responses_music_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
fviz_cluster(responses_music_df_with_gender.res, data = responses_music_df_with_gender,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# Optimal Number of Clusters for Movies
fviz_nbclust(responses_movies_df, kmeans, method = "gap_stat")
set.seed(101)
responses_movies_df.res <- kmeans(responses_movies_df, 3, nstart = 25)
fviz_cluster(responses_movies_df.res, data = responses_movies_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
fviz_nbclust(responses_movies_df_with_gender, kmeans, method = "gap_stat")
set.seed(101)
responses_music_df_with_gender.res <- kmeans(responses_music_df, 3, nstart = 25)
fviz_cluster(responses_movies_df_with_gender.res, data = responses_movies_df_with_gender,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
responses_movies_df_with_gender.res <- kmeans(responses_movies_df_with_gender, 3, nstart = 25)
fviz_cluster(responses_movies_df_with_gender.res, data = responses_movies_df_with_gender,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# Optimal Number of Clusters for Interests
fviz_nbclust(responses_interests_df, kmeans, method = "gap_stat")
set.seed(101)
responses_interests_df.res <- kmeans(responses_interests_df, 6, nstart = 25)
fviz_cluster(responses_interests_df.res, data = responses_interests_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
fviz_nbclust(responses_interests_df_with_gender, kmeans, method = "gap_stat")
responses_interests_df_with_gender.res <- kmeans(responses_interests_df_with_gender, 6, nstart = 25)
fviz_cluster(responses_interests_df_with_gender.res, data = responses_interests_df_with_gender,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
fviz_nbclust(responses_fear_df_with_gender, kmeans, method = "gap_stat")
set.seed(101)
responses_fear_df_with_gender.res <- kmeans(responses_fear_df_with_gender, 2, nstart = 25)
fviz_cluster(responses_fear_df_with_gender.res, data = responses_fear_df_with_gender,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# Optimal Number of Clusters for Fear
fviz_nbclust(responses_fear_df, kmeans, method = "gap_stat")
set.seed(101)
responses_fear_df.res <- kmeans(responses_fear_df, 5, nstart = 25)
fviz_cluster(responses_fear_df.res, data = responses_fear_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
