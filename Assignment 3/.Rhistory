str(new_df)
for (i in 2:length(cuisDF)){
for (j in 1:length(cuisDF[i,])){
if(cuisDF[i,j] != 0){
new_df <- rbind(new_df, c(names(cuisDF[i]), cuisDF[i,j], stringsAsFactors = FALSE))
break
}
}
}
View(new_df)
new_df <- data.frame(names(cuisDF[1]), cuisDF[1,1], stringsAsFactors = FALSE)
colnames(new_df) <- c("Ingredients", "TFIDF")
str(new_df)
for (i in 2:length(cuisDF)){
for (j in 1:length(cuisDF[i,])){
if(cuisDF[i,j] != 0){
new_df <- rbind(new_df, c(names(cuisDF[i]), cuisDF[i,j], stringsAsFactors = FALSE))
break
}
}
}
new_df$TFIDF <- as.numeric(as.character(new_df$TFIDF))
str(cuisDF)
# Inspect the DataFrame
str(new_df)
write.csv(new_df, file = "TFIDF.csv")
new_df[2]
which(new_df[2] <= 3.21)
# Mean of TF_IDF is 3.21
ingredients_to_remove <- new_df[which(new_df[2] <= 3.21)]
# Mean of TF_IDF is 3.21
ingredients_to_remove <- new_df[,which(new_df[2] <= 3.21)]
# Mean of TF_IDF is 3.21
ingredients_to_remove <- new_df[which(new_df[2] <= 3.21),]
head(ingredients_to_remove)
cuisDF[1]
cuisDF[2]
cuisDF[1,1]
cuisDF$blackolives
final_df <- new_df[, -which(names(new_df) %in% c(ingredients_to_remove$Ingredients))]
View(final_df)
rm(final_df)
names(new_df)
names(cuisDF)
c(ingredients_to_remove$Ingredients)
final_df <- cuisDF[, -which(names(cuisDF) %in% c(ingredients_to_remove$Ingredients))]
cuisDF
final_df <- final_df[, -which(rowSums(final_df) < 10)]
final_df <- cuisDF[, -which(names(cuisDF) %in% c(ingredients_to_remove$Ingredients))]
final_df <- final_df[-which(rowSums(final_df) < 10), ]
# Top 20 most important ingredients is at 9.95
ingredients_to_remove <- new_df[which(new_df$TFIDF <= 9.95),]
head(ingredients_to_remove)
# Top 20 most important ingredients is at 9.95
ingredients_to_remove <- new_df[-(which(new_df$TFIDF <= 9.95)),]
head(ingredients_to_remove)
# Top 20 most important ingredients is at 9.95
ingredients_to_remove <- new_df[-(which(new_df$TFIDF <= 9)),]
head(ingredients_to_remove)
View(ingredients_to_remove)
final_df <- cuisDF[, -which(names(cuisDF) %in% c(ingredients_to_remove$Ingredients))]
final_df <- final_df[-which(rowSums(final_df) < 10), ]
# Top 20 most important ingredients is at 9.95
ingredients_to_remove <- new_df[which(new_df$TFIDF <= 9),]
head(ingredients_to_remove)
final_df <- cuisDF[, -which(names(cuisDF) %in% c(ingredients_to_remove$Ingredients))]
final_df <- final_df[-which(rowSums(final_df) < 10), ]
View(final_df)
library(factoextra)
## Now we should be able to do our cluster!
fviz_nbclust(final_df, kmeans, method = "gap_stat")
# Suggested number of cluster is 3
set.seed(101)
final_df.res <- kmeans(final_df, 3, nstart = 25)
fviz_cluster(final_df.res, data = final_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
final_df.hc <- final_df %>%
scale() %>%                    # Scale the data
dist(method = "euclidean") %>% # Compute dissimilarity matrix
hclust(method = "ward.D2")     # Compute hierachical clustering
fviz_dend(final_df.hc, k = 4, # Cut in four groups
cex = 0.5, # label size
k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
install.packages("NbClust")
library(NbClust)
final_df.nbclust <- final_df %>%
scale() %>%
NbClust(distance = "euclidean",
min.nc = 2, max.nc = 10,
method = "complete", index ="all")
fviz_nbclust(final_df.nbclust, ggtheme = theme_minimal())
final_df.nbclust <- final_df %>%
scale() %>%
NbClust(distance = "euclidean",
min.nc = 2, max.nc = 10,
method = "complete", index ="all")
final_df.nbclust <- final_df %>%
scale() %>%
NbClust(distance = "euclidean",
min.nc = 2, max.nc = 10,
method = "complete")
final_df.hc <- final_df %>%
scale() %>%                    # Scale the data
dist(method = "euclidean") %>% # Compute dissimilarity matrix
hclust(method = "ward.D2")     # Compute hierachical clustering
fviz_dend(final_df.hc, k = 3, # Cut in four groups
cex = 0.5, # label size
k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_dend(final_df.hc, k = 3, # Cut in four groups
cex = 0.5, # label size
k_colors = c("#2E9FDF", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_dend(final_df.hc, k = 4, # Cut in four groups
cex = 0.5, # label size
k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
# Top 20 most important ingredients is at 9.95
ingredients_to_remove <- new_df[which(new_df$TFIDF <= 9.95),]
head(ingredients_to_remove)
final_df <- cuisDF[, -which(names(cuisDF) %in% c(ingredients_to_remove$Ingredients))]
final_df <- final_df[-which(rowSums(final_df) < 10), ]
fviz_nbclust(final_df, kmeans, method = "gap_stat")
final_df.res <- kmeans(final_df, 6, nstart = 25)
fviz_cluster(final_df.res, data = final_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
final_df.hc <- final_df %>%
scale() %>%                    # Scale the data
dist(method = "euclidean") %>% # Compute dissimilarity matrix
hclust(method = "ward.D2")     # Compute hierachical clustering
fviz_dend(final_df.hc, k = 4, # Cut in four groups
cex = 0.5, # label size
k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_dend(final_df.hc, k = 6, # Cut in four groups
cex = 0.5, # label size
k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07", "#8B008B", "#F0E68C"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_dend(final_df.hc, k = 6, # Cut in four groups
cex = 1, # label size
k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07", "#8B008B", "#F0E68C"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_dend(final_df.hc, k = 6, # Cut in four groups
cex = 0.1, # label size
k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07", "#8B008B", "#F0E68C"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_dend(final_df.hc, k = 6, # Cut in four groups
cex = 0.2, # label size
k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07", "#8B008B", "#F0E68C"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_nbclust(final_df, kmeans, method = "gap_stat")
# Suggested number of cluster is 6
set.seed(101)
final_df.res <- kmeans(final_df, 6, nstart = 25)
fviz_cluster(final_df.res, data = final_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
library(magrittr)
suppressMessages(library(dplyr))
library(readr)
library(ggplot2)
suppressMessages(library(tidyr))
# Helper functions
analyze_group_differences <- function(df, group, start, end) {
avgs_by_group <-  df %>%
dplyr::rename_(group = group) %>%
select_("group", paste0("`", start, "`:`", end,"`")) %>%
dplyr::group_by(group) %>%
dplyr::summarise_all(mean, na.rm = TRUE) %>%
na.omit
vars_by_difference <- avgs_by_group %>%
dplyr::select(-group) %>%
apply(2, function(x) x[1] - x[2]) %>%
sort %>%
names
avgs_by_group %>%
tidyr::gather(Variable, `avg response`, -group) %>%
ggplot(aes(x = Variable, y = `avg response`, group = group, colour = group)) +
geom_point(size = 5) +
scale_x_discrete(limits = vars_by_difference) +
ylim(1, 5) +
geom_hline(yintercept = 3) +
coord_flip() +
theme(axis.text.y = element_text(face="bold", color="black", size=14),
legend.position="top")
}
# Reading data
df <- readr::read_delim("responses.csv", delim = ",")
dim(df)
# Gender differences in music preferences
df %>% analyze_group_differences("Gender", "Dance", "Opera")
head(df)
# Gender differences in interests
df %>% analyze_group_differences("Gender", "History", "Pets")
# Gender differences in phobias
df %>% analyze_group_differences("Gender", "Flying", "Fear of public speaking")
str(df)
responses_df <- read.csv("responses.csv")
dim(responses_df)
head(responses_df[1,1])
head(responses_df[1,])
str(responses_df)
fviz_nbclust(responses_df, kmeans, method = "gap_stat")
is.na(responses_df)
rm(is.na(responses_df))
which(is.na(responses_df))
rm(response_df$which(is.na(responses_df)))
which(is.na(responses_df))
responses_df.dropna(axis=1, how='all')
str(responses_df)
responses_df[-(which(is.na(responses_df))),]
clear()
responses_df[,3:19]
response_df[responses_df[,3:19]]
responses_df[responses_df[,3:19]]
responses_df[,responses_df[,3:19]]
responses_df[,3:19]
Music_Gender <- group_by(responses_df[,3:19], gender)
responses_df[,c("Dance", "Folk", "Country")]
music <- responses_df[,3:19]
Music_Gender <- group_by(responses_df[,c(music, "gender")], gender)
music
music <- c(responses_df[,3:19], responses_df$Gender)
music
music <- c(responses_df[,3:19] + responses_df$Gender)
music <- c(responses_df[,3:19])
music
music <- responses_df[,3:19] + responses_df$Gender
music <- responses_df[,3:19]
str(music)
music <- cbind(music, responses_df$Gender)
str(music)
colnames(music[-1]) <- c("Gender")
str(music)
music[-1]
music[,-1]
colnames(music$`responses_df$Gender`) <- c("Gender")
colnames(music$`responses_df$Gender`) <- "Gender"
str(music)
music <- cbind(music, Gender=(responses_df$Gender))
str(music)
music <- responses_df[,3:19]
music <- cbind(music, Gender=(responses_df$Gender))
str(music)
Music_Gender <- group_by(music, gender)
Music_Gender <- group_by(music, Gender)
summarise_all(mean, na.rm=TRUE)
summarise_all(Music_Gender, mean, na.rm=TRUE)
plot_variables <- summarise_all(Music_Gender, mean, na.rm=TRUE)
ggplot(plot_variables)
str(plot_variables)
summarise_all(Music_Gender, mean, na.rm=TRUE)
responses_df$Gender = ""
responses_df <- read.csv("responses.csv")
music <- cbind(music, Gender=(responses_df$Gender))
music <- responses_df[,3:19]
music <- cbind(music, Gender=(responses_df$Gender))
responses_df[responses_df$Gender == ""]
responses_df[, responses_df$Gender == ""]
responses_df[responses_df$Gender == "", ]
responses_df <- responses_df[-which(responses_df$Gender == ""), ]
music <- responses_df[,3:19]
music <- cbind(music, Gender=(responses_df$Gender))
str(music)
# There's missing gender in the dataframe
responses_df <- responses_df[-which(responses_df$Gender == ""), ]
responses_df <- read.csv("responses.csv")
"
""
""
# There's missing gender in the dataframe
responses_df <- responses_df[-which(responses_df$Gender == ""), ]
music <- responses_df[,3:19]
which(responses_df$Gender == "")
music <- cbind(music, Gender=(responses_df$Gender))
str(music)
music <- music[-which(music$Gender == ""),]
music <- responses_df[,3:19]
music <- cbind(music, Gender=(responses_df$Gender))
music <- music[-which(music$Gender == " "),]
music <- responses_df[,3:19]
music <- cbind(music, Gender=(responses_df$Gender))
music <- music[-which(music$Gender != "female" | music$Gender != "male"),]
music <- responses_df[,3:19]
music <- cbind(music, Gender=(responses_df$Gender))
music <- music[which(music$Gender != "female" | music$Gender != "male"),]
str(music)
na.rm(music)
music <- responses_df[,3:19]
music <- cbind(music, Gender=(responses_df$Gender))
music <- music[!is.na(music)]
str(music)
music <- music[!is.na(music), ]
music <- responses_df[,3:19]
music <- cbind(music, Gender=(responses_df$Gender))
music <- music[!is.na(music), ]
music <- responses_df[,3:19]
music <- cbind(music, Gender=(responses_df$Gender))
Music_Gender <- group_by(music, Gender)
summarise_all(Music_Gender, mean, na.rm=TRUE)
plot(summarise_all(Music_Gender, mean, na.rm=TRUE))
ggplot(summarise_all(Music_Gender, mean, na.rm=TRUE))
summary <- summarise_all(Music_Gender, mean, na.rm=TRUE)
plot(summary$Dance)
ggplot(aes(x = summary, y = `avg response`, group = summary$Gender, colour = group)) +
geom_point(size = 5) +
ylim(1, 5) +
geom_hline(yintercept = 3) +
coord_flip() +
theme(axis.text.y = element_text(face="bold", color="black", size=14),
legend.position="top")
Music_Gender <- group_by(music, Gender)
str(Music_Gender)
# There's missing gender in the dataframe
responses_df <- responses_df[-which(responses_df$Gender == ""), ]
music <- responses_df[,3:19]
music <- cbind(music, Gender=(responses_df$Gender))
Music_Gender <- group_by(music, Gender)
str(Music_Gender)
responses_df <- read.csv("responses.csv")
# There's missing gender in the dataframe
responses_df <- responses_df[-which(responses_df$Gender == ""), ]
music <- responses_df[,3:19]
music <- cbind(music, Gender=(responses_df$Gender))
Music_Gender <- group_by(music, Gender)
str(Music_Gender)
Music_Gender <- group_by(music, Gender, na.rm = T)
str(Music_Gender)
Music_Gender <- group_by(music, Gender)
str(Music_Gender)
na.omit(music)
music <- na.omit(music)
Music_Gender <- group_by(music, Gender)
str(Music_Gender)
# There's missing gender in the dataframe
responses_df <- responses_df[-which(responses_df$Gender == ""), ]
responses_df <- read.csv("responses.csv")
# There's missing gender in the dataframe
responses_df <- responses_df[which(responses_df$Gender == "female" | responses_df$Gender == "male"), ]
music <- responses_df[,3:19]
music <- cbind(music, Gender=(responses_df$Gender))
music <- na.omit(music)
Music_Gender <- group_by(music, Gender)
str(Music_Gender)
responses_df <- read.csv("responses.csv")
# There's missing gender in the dataframe
responses_df <- na.omit(responses_df)
fviz_nbclust(responses_df, kmeans, method = "gap_stat")
responses_df[, 3:19]
# Remove String Columns
responses_music_df <- responses_df[, 3:19]
responses_music_df <- cbind(responses_music_df, Gender=(responses_df$Gender))
head(responses_music_df)
fviz_nbclust(responses_df, kmeans, method = "gap_stat")
responses_music_df$Gender <- factor(responses_music_df$Gender, levels = c("male", "female"), labels = c(0,1))
head(responses_music_df)
str(responses_music_df)
head(responses_music_df)
fviz_nbclust(responses_df, kmeans, method = "gap_stat")
responses_df <- read.csv("responses.csv")
# There's Non-Applicable Value in the dataframe
responses_df <- na.omit(responses_df)
# Remove String Columns
# Interest in Music
responses_music_df <- responses_df[, 3:19]
fviz_nbclust(responses_music_df, kmeans, method = "gap_stat")
set.seed(101)
responses_music_df.res <- kmeans(responses_music_df, 3, nstart = 25)
fviz_cluster(final_df.res, data = final_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
responses_df <- read.csv("responses.csv")
# There's Non-Applicable Value in the dataframe
responses_df <- na.omit(responses_df)
str(responses_df)
# Interest in Movies
responses_movies_df <- responses_df[,21:32]
# Optimal Number of Clusters for Movies
fviz_nbclust(responses_movies_df, kmeans, method = "gap_stat")
responses_movies_df.res <- kmeans(responses_movies_df, 4, nstart = 25)
fviz_cluster(responses_music_df.res, data = responses_music_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# Optimal Number of Clusters for Movies
fviz_nbclust(responses_movies_df, kmeans, method = "gap_stat")
set.seed(101)
responses_movies_df.res <- kmeans(responses_movies_df, 4, nstart = 25)
fviz_cluster(responses_movies_df.res, data = responses_movies_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# Interests
responses_interests_df <- responses_df[, 33:64]
# Optimal Number of Clusters for Interests
fviz_nbclust(responses_interests_df, kmeans, method = "gap_stat")
set.seed(101)
responses_interests_df.res <- kmeans(responses_interests_df, 6, nstart = 25)
fviz_cluster(responses_interests_df.res, data = responses_interests_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# Fears
responses_fear_df <- responses_df[, 65:75]
# Optimal Number of Clusters for Fear
fviz_nbclust(responses_fear_df, kmeans, method = "gap_stat")
# Optimal Number of Clusters for Fear
fviz_nbclust(responses_fear_df, kmeans, method = "gap_stat")
# Fears
responses_fear_df <- responses_df[, 65:74]
# Optimal Number of Clusters for Fear
fviz_nbclust(responses_fear_df, kmeans, method = "gap_stat")
# Load essential packages
library(jsonlite)
library(tm)
library(cluster)
library(SnowballC)
library(tidyr)
library(factoextra)
responses_df <- read.csv("responses.csv")
# There's Non-Applicable Value in the dataframe
responses_df <- na.omit(responses_df)
str(responses_df)
responses_df$Gender <- as.numeric(as.factor(responses_df$Gender))
str(responses_df)
responses_df$Gender
# There's Non-Applicable Value in the dataframe
responses_df <- na.omit(responses_df)
responses_df <- read.csv("responses.csv")
# There's Non-Applicable Value in the dataframe
responses_df <- na.omit(responses_df)
responses_df$Gender <- as.numeric(as.factor(responses_df$Gender))
str(responses_df)
# Remove String Columns
# Interest in Music
responses_music_df <- responses_df[, 3:19]
responses_music_df <- cbind(responses_music_df, Gender=(responses_df$Gender))
str(responses_music_df)
# Optimal Number Of Clusters for Music
fviz_nbclust(responses_music_df, kmeans, method = "gap_stat")
set.seed(101)
responses_music_df.res <- kmeans(responses_music_df, 3, nstart = 25)
fviz_cluster(responses_music_df.res, data = responses_music_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
str(responses_movies_df)
# Interest in Movies
responses_movies_df <- responses_df[,21:32]
str(responses_movies_df)
# Interest in Movies
responses_movies_df <- responses_df[,21:31]
str(responses_movies_df)
responses_movies_df <- cbind(responses_movies_df, Gender=(responses_df$Gender))
str(responses_movies_df)
# Optimal Number of Clusters for Movies
fviz_nbclust(responses_movies_df, kmeans, method = "gap_stat")
responses_movies_df.res <- kmeans(responses_movies_df, 3, nstart = 25)
fviz_cluster(responses_movies_df.res, data = responses_movies_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# Interests
responses_interests_df <- responses_df[, 32:63]
str(responses_interests_df)
responses_interests_df <- cbind(responses_interests_df, Gender=(responses_df$Gender))
str(responses_interests_df)
# Optimal Number of Clusters for Interests
fviz_nbclust(responses_interests_df, kmeans, method = "gap_stat")
set.seed(101)
responses_interests_df.res <- kmeans(responses_interests_df, 6, nstart = 25)
fviz_cluster(responses_interests_df.res, data = responses_interests_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# Fears
responses_fear_df <- responses_df[, 65:73]
str(responses_fear_df)
responses_fear_df <- cbind(responses_fear_df, Gender=(responses_df$Gender))
str(responses_fear_df)
# Optimal Number of Clusters for Fear
fviz_nbclust(responses_fear_df, kmeans, method = "gap_stat")
responses_fear_df.res <- kmeans(responses_fear_df, 2, nstart = 25)
fviz_cluster(responses_fear_df.res, data = responses_fear_df,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
